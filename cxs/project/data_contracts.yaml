# Data Contracts Specification

# Contract metadata
contract_info:
  name: "project-data-contracts"
  version: "1.0.0"
  created_date: "YYYY-MM-DD"
  last_updated: "YYYY-MM-DD"
  owner: "data-team"

# Data entity definitions
entities:
  - name: "User"
    description: "User account and profile information"
    schema_version: "1.0"
    fields:
      - name: "user_id"
        type: "string"
        format: "uuid"
        required: true
        description: "Unique user identifier"
        constraints:
          - "Must be valid UUID format"
      - name: "email"
        type: "string"
        format: "email"
        required: true
        description: "User email address"
        constraints:
          - "Must be valid email format"
          - "Must be unique across all users"
      - name: "created_at"
        type: "datetime"
        format: "ISO-8601"
        required: true
        description: "Account creation timestamp"
      - name: "status"
        type: "string"
        format: "enum"
        required: true
        description: "Account status"
        constraints:
          - "Values: active, inactive, suspended"
    relationships:
      - target: "UserProfile"
        type: "one-to-one"
        description: "User has one profile"
      - target: "Transaction"
        type: "one-to-many"
        description: "User can have multiple transactions"

  - name: "Transaction"
    description: "Transaction record"
    schema_version: "1.0"
    fields:
      - name: "transaction_id"
        type: "string"
        format: "uuid"
        required: true
        description: "Unique transaction identifier"
      - name: "user_id"
        type: "string"
        format: "uuid"
        required: true
        description: "Reference to user"
      - name: "amount"
        type: "decimal"
        format: "currency"
        required: true
        description: "Transaction amount"
        constraints:
          - "Must be positive value"
          - "Maximum 2 decimal places"
      - name: "transaction_type"
        type: "string"
        format: "enum"
        required: true
        description: "Type of transaction"
        constraints:
          - "Values: debit, credit, transfer"
      - name: "timestamp"
        type: "datetime"
        format: "ISO-8601"
        required: true
        description: "Transaction timestamp"
    relationships:
      - target: "User"
        type: "many-to-one"
        description: "Multiple transactions belong to one user"

# API contract specifications
api_contracts:
  - endpoint: "/api/users"
    method: "POST"
    description: "Create new user"
    request_schema:
      content_type: "application/json"
      schema:
        type: "object"
        required: ["email", "password"]
        properties:
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
            minLength: 8
    response_schema:
      success:
        status: 201
        content_type: "application/json"
        schema:
          type: "object"
          properties:
            user_id:
              type: "string"
              format: "uuid"
            email:
              type: "string"
              format: "email"
            created_at:
              type: "string"
              format: "date-time"
      error:
        status: 400
        content_type: "application/json"
        schema:
          type: "object"
          properties:
            error:
              type: "string"
            message:
              type: "string"

  - endpoint: "/api/transactions"
    method: "GET"
    description: "Retrieve user transactions"
    parameters:
      - name: "user_id"
        in: "query"
        required: true
        type: "string"
        format: "uuid"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 100
    response_schema:
      success:
        status: 200
        content_type: "application/json"
        schema:
          type: "object"
          properties:
            transactions:
              type: "array"
              items:
                $ref: "#/entities/Transaction"
            total_count:
              type: "integer"
            has_more:
              type: "boolean"

# Data quality contracts
quality_contracts:
  - entity: "User"
    rules:
      - name: "email_uniqueness"
        description: "User emails must be unique"
        validation: "COUNT(DISTINCT email) = COUNT(*)"
        severity: "critical"
      - name: "valid_status"
        description: "Status must be valid enum value"
        validation: "status IN ('active', 'inactive', 'suspended')"
        severity: "critical"
      - name: "recent_activity"
        description: "Users should have recent activity"
        validation: "last_login > NOW() - INTERVAL 90 DAYS"
        severity: "warning"

  - entity: "Transaction"
    rules:
      - name: "positive_amounts"
        description: "Transaction amounts must be positive"
        validation: "amount > 0"
        severity: "critical"
      - name: "valid_user_reference"
        description: "User ID must reference existing user"
        validation: "EXISTS(SELECT 1 FROM users WHERE user_id = transactions.user_id)"
        severity: "critical"
      - name: "reasonable_amounts"
        description: "Transaction amounts should be reasonable"
        validation: "amount <= 10000"
        severity: "warning"

# Data flow contracts
data_flows:
  - name: "user_onboarding_flow"
    description: "New user registration data flow"
    steps:
      - step: 1
        process: "user_registration"
        input: "registration_form_data"
        output: "validated_user_data"
        validation:
          - "Email format validation"
          - "Password strength validation"
      - step: 2
        process: "user_creation"
        input: "validated_user_data"
        output: "user_record"
        validation:
          - "Email uniqueness check"
          - "Database constraints validation"
      - step: 3
        process: "profile_initialization"
        input: "user_record"
        output: "user_profile"
        validation:
          - "Profile completeness check"

# Integration contracts
integration_contracts:
  - name: "external_payment_service"
    type: "outbound"
    protocol: "REST API"
    data_format: "JSON"
    schema:
      request:
        endpoint: "/payments"
        method: "POST"
        payload:
          user_id: "string"
          amount: "decimal"
          currency: "string"
      response:
        success:
          transaction_id: "string"
          status: "string"
        error:
          error_code: "string"
          message: "string"
    sla:
      response_time: "< 5 seconds"
      availability: "99.5%"
      retry_policy: "3 attempts with exponential backoff"

# Data retention and lifecycle
retention_policies:
  - entity: "User"
    active_retention: "5 years from last activity"
    archive_retention: "7 years"
    deletion_criteria: "User requests deletion OR retention period exceeded"
  - entity: "Transaction"
    active_retention: "3 years"
    archive_retention: "10 years"
    deletion_criteria: "Legal retention period exceeded"

# Data privacy and security
privacy_contracts:
  - data_type: "personal_information"
    classification: "PII"
    encryption: "required"
    access_controls: "role-based"
    audit_logging: "required"
  - data_type: "financial_data"
    classification: "sensitive"
    encryption: "required"
    access_controls: "strict"
    audit_logging: "required"

# Schema evolution and versioning
versioning:
  strategy: "semantic_versioning"
  backward_compatibility: "required"
  migration_support: "automated"
  deprecation_notice: "6 months minimum"

# Monitoring and alerting
monitoring:
  data_quality_checks:
    frequency: "daily"
    alerting: "immediate for critical violations"
  schema_compliance:
    frequency: "real-time"
    alerting: "immediate for violations"
  performance_metrics:
    frequency: "continuous"
    alerting: "threshold-based"

# Contract validation and testing
validation:
  automated_testing: true
  contract_testing: "consumer-driven"
  data_validation: "pipeline-integrated"
  regression_testing: "required for schema changes"

# Governance and approval
governance:
  approval_process: "data-committee"
  change_management: "formal-process"
  documentation_required: true
  stakeholder_notification: "automated"